"""
üîå Professional Plugin Architecture for D64 Converter
====================================================

Faz 3.3: Professional Plugin Architecture Implementation
Author: Enhanced AI System
Created: 28 Temmuz 2025
Purpose: Geni≈ületilebilir plugin sistemi ile mod√ºler mimari

üìã PLUGIN T√úRLERƒ∞:
- üé® Format Plugins: Yeni disassembly formatlarƒ±
- üîÑ Transpiler Plugins: Yeni hedef diller
- üîç Analyzer Plugins: √ñzel analiz ara√ßlarƒ±  
- üì§ Export Plugins: Farklƒ± √ßƒ±ktƒ± formatlarƒ±
- üõ†Ô∏è Tool Plugins: √ñzel ara√ßlar ve yardƒ±mcƒ±lar

üèóÔ∏è Plugin Interface Requirements:
1. Plugin metadata (name, version, author, description)
2. Plugin type classification
3. Dependency management
4. Plugin lifecycle (load, init, execute, cleanup)
5. Error handling and logging
6. Plugin discovery and auto-loading
"""

import os
import sys
import json
import importlib
import importlib.util
from abc import ABC, abstractmethod
from typing import Dict, List, Optional, Any, Type, Callable
from dataclasses import dataclass
from pathlib import Path
import logging
from enum import Enum

# Plugin Types Enum
class PluginType(Enum):
    FORMAT = "format"
    TRANSPILER = "transpiler"
    ANALYZER = "analyzer"
    EXPORT = "export"
    TOOL = "tool"

@dataclass
class PluginMetadata:
    """Plugin metadata structure"""
    name: str
    version: str
    author: str
    description: str
    plugin_type: PluginType
    dependencies: List[str]
    entry_point: str
    config_schema: Optional[Dict] = None
    min_api_version: str = "1.0.0"
    
class IPlugin(ABC):
    """Base Plugin Interface - T√ºm pluginler bu interface'i implement etmeli"""
    
    @abstractmethod
    def get_metadata(self) -> PluginMetadata:
        """Plugin metadata d√∂nd√ºr"""
        pass
    
    @abstractmethod
    def initialize(self, context: Dict[str, Any]) -> bool:
        """Plugin'i ba≈ülat - True: ba≈üarƒ±lƒ±, False: ba≈üarƒ±sƒ±z"""
        pass
    
    @abstractmethod
    def execute(self, *args, **kwargs) -> Any:
        """Plugin'in ana i≈ülevini √ßalƒ±≈ütƒ±r"""
        pass
    
    @abstractmethod
    def cleanup(self) -> None:
        """Plugin cleanup i≈ülemleri"""
        pass
    
    def get_config(self) -> Dict[str, Any]:
        """Plugin config d√∂nd√ºr (optional)"""
        return {}

class IFormatPlugin(IPlugin):
    """Format Plugin Interface"""
    
    @abstractmethod
    def get_format_name(self) -> str:
        """Format adƒ±nƒ± d√∂nd√ºr (√∂rn: "KickAssembler", "TASS", "DASM")"""
        pass
    
    @abstractmethod
    def format_assembly(self, assembly_code: str, options: Dict[str, Any] = None) -> str:
        """Assembly kodunu belirli formata √ßevir"""
        pass
    
    @abstractmethod
    def parse_assembly(self, formatted_code: str) -> Dict[str, Any]:
        """Formatlanmƒ±≈ü assembly'yi parse et"""
        pass

class ITranspilerPlugin(IPlugin):
    """Transpiler Plugin Interface"""
    
    @abstractmethod
    def get_target_language(self) -> str:
        """Hedef dil adƒ±nƒ± d√∂nd√ºr (√∂rn: "C++", "Rust", "C#")"""
        pass
    
    @abstractmethod
    def transpile(self, assembly_code: str, options: Dict[str, Any] = None) -> str:
        """Assembly'yi hedef dile √ßevir"""
        pass
    
    @abstractmethod
    def get_file_extension(self) -> str:
        """√áƒ±ktƒ± dosya uzantƒ±sƒ± (√∂rn: ".cpp", ".rs", ".cs")"""
        pass

class IAnalyzerPlugin(IPlugin):
    """Analyzer Plugin Interface"""
    
    @abstractmethod
    def get_analysis_type(self) -> str:
        """Analiz t√ºr√ºn√º d√∂nd√ºr (√∂rn: "Performance", "Security", "Optimization")"""
        pass
    
    @abstractmethod
    def analyze(self, code: str, context: Dict[str, Any] = None) -> Dict[str, Any]:
        """Kod analizi yap ve sonu√ßlarƒ± d√∂nd√ºr"""
        pass

class IExportPlugin(IPlugin):
    """Export Plugin Interface"""
    
    @abstractmethod
    def get_export_format(self) -> str:
        """Export format adƒ±nƒ± d√∂nd√ºr (√∂rn: "PDF", "HTML", "XML")"""
        pass
    
    @abstractmethod
    def export(self, data: Any, output_path: str, options: Dict[str, Any] = None) -> bool:
        """Veriyi belirtilen formatta export et"""
        pass

class IToolPlugin(IPlugin):
    """Tool Plugin Interface"""
    
    @abstractmethod
    def get_tool_name(self) -> str:
        """Tool adƒ±nƒ± d√∂nd√ºr"""
        pass
    
    @abstractmethod
    def run_tool(self, input_data: Any, options: Dict[str, Any] = None) -> Any:
        """Tool'u √ßalƒ±≈ütƒ±r"""
        pass

class PluginManager:
    """üîå Professional Plugin Manager"""
    
    def __init__(self, plugins_dir: str = "plugins", config_file: str = "plugin_config.json"):
        self.plugins_dir = Path(plugins_dir)
        self.config_file = config_file
        self.loaded_plugins: Dict[str, IPlugin] = {}
        self.plugin_registry: Dict[PluginType, List[str]] = {
            PluginType.FORMAT: [],
            PluginType.TRANSPILER: [],
            PluginType.ANALYZER: [],
            PluginType.EXPORT: [],
            PluginType.TOOL: []
        }
        
        # Logging setup
        self.logger = logging.getLogger("PluginManager")
        self.logger.setLevel(logging.INFO)
        
        # Plugin discovery cache
        self.discovery_cache: Dict[str, PluginMetadata] = {}
        
        # Create plugins directory if not exists
        self.plugins_dir.mkdir(exist_ok=True)
        
        # Initialize plugin manager
        self._initialize()
    
    def _initialize(self):
        """Plugin Manager'ƒ± ba≈ülat"""
        self.logger.info("üîå Plugin Manager ba≈ülatƒ±lƒ±yor...")
        
        # Load configuration
        self._load_config()
        
        # Discover plugins
        self._discover_plugins()
        
        # Auto-load enabled plugins
        self._auto_load_plugins()
        
        self.logger.info(f"‚úÖ Plugin Manager hazƒ±r - {len(self.loaded_plugins)} plugin y√ºklendi")
    
    def _load_config(self):
        """Plugin configuration y√ºkle"""
        try:
            if os.path.exists(self.config_file):
                with open(self.config_file, 'r', encoding='utf-8') as f:
                    self.config = json.load(f)
            else:
                self.config = {
                    "auto_load": True,
                    "enabled_plugins": [],
                    "disabled_plugins": [],
                    "plugin_settings": {}
                }
                self._save_config()
        except Exception as e:
            self.logger.error(f"‚ùå Config y√ºkleme hatasƒ±: {e}")
            self.config = {}
    
    def _save_config(self):
        """Plugin configuration kaydet"""
        try:
            with open(self.config_file, 'w', encoding='utf-8') as f:
                json.dump(self.config, f, indent=2, ensure_ascii=False)
        except Exception as e:
            self.logger.error(f"‚ùå Config kaydetme hatasƒ±: {e}")
    
    def _discover_plugins(self):
        """Plugin'leri ke≈üfet ve metadata'larƒ±nƒ± oku"""
        self.logger.info("üîç Plugin ke≈üfi ba≈ülatƒ±lƒ±yor...")
        
        for plugin_file in self.plugins_dir.rglob("*.py"):
            if plugin_file.name.startswith("__"):
                continue
                
            try:
                metadata = self._read_plugin_metadata(plugin_file)
                if metadata:
                    self.discovery_cache[metadata.name] = metadata
                    self.logger.info(f"‚úÖ Plugin ke≈üfedildi: {metadata.name} v{metadata.version}")
            except Exception as e:
                self.logger.error(f"‚ùå Plugin ke≈üif hatasƒ± ({plugin_file}): {e}")
    
    def _read_plugin_metadata(self, plugin_file: Path) -> Optional[PluginMetadata]:
        """Plugin dosyasƒ±ndan metadata oku"""
        try:
            spec = importlib.util.spec_from_file_location("temp_plugin", plugin_file)
            if not spec or not spec.loader:
                return None
                
            module = importlib.util.module_from_spec(spec)
            spec.loader.exec_module(module)
            
            # Plugin class'ƒ±nƒ± bul
            for attr_name in dir(module):
                attr = getattr(module, attr_name)
                if (isinstance(attr, type) and 
                    issubclass(attr, IPlugin) and 
                    attr != IPlugin):
                    
                    # Temporary instance olu≈ütur ve metadata al
                    try:
                        temp_instance = attr()
                        metadata = temp_instance.get_metadata()
                        temp_instance.cleanup()
                        return metadata
                    except Exception as e:
                        self.logger.warning(f"‚ö†Ô∏è Plugin metadata okuma hatasƒ±: {e}")
                        continue
                        
            return None
        except Exception as e:
            self.logger.error(f"‚ùå Plugin dosya okuma hatasƒ±: {e}")
            return None
    
    def _auto_load_plugins(self):
        """Enabled plugin'leri otomatik y√ºkle"""
        if not self.config.get("auto_load", True):
            return
            
        for plugin_name, metadata in self.discovery_cache.items():
            if (plugin_name not in self.config.get("disabled_plugins", []) and
                (not self.config.get("enabled_plugins") or 
                 plugin_name in self.config.get("enabled_plugins", []))):
                
                try:
                    self.load_plugin(plugin_name)
                except Exception as e:
                    self.logger.error(f"‚ùå Auto-load hatasƒ± ({plugin_name}): {e}")
    
    def load_plugin(self, plugin_name: str) -> bool:
        """Plugin'i y√ºkle"""
        if plugin_name in self.loaded_plugins:
            self.logger.warning(f"‚ö†Ô∏è Plugin zaten y√ºkl√º: {plugin_name}")
            return True
            
        if plugin_name not in self.discovery_cache:
            self.logger.error(f"‚ùå Plugin bulunamadƒ±: {plugin_name}")
            return False
            
        try:
            metadata = self.discovery_cache[plugin_name]
            
            # Plugin dosyasƒ±nƒ± bul
            plugin_file = None
            for pfile in self.plugins_dir.rglob("*.py"):
                if self._get_plugin_name_from_file(pfile) == plugin_name:
                    plugin_file = pfile
                    break
                    
            if not plugin_file:
                self.logger.error(f"‚ùå Plugin dosyasƒ± bulunamadƒ±: {plugin_name}")
                return False
            
            # Plugin'i y√ºkle
            spec = importlib.util.spec_from_file_location(f"plugin_{plugin_name}", plugin_file)
            if not spec or not spec.loader:
                self.logger.error(f"‚ùå Plugin spec olu≈üturulamadƒ±: {plugin_name}")
                return False
                
            module = importlib.util.module_from_spec(spec)
            spec.loader.exec_module(module)
            
            # Plugin class'ƒ±nƒ± bul ve instance olu≈ütur
            plugin_instance = None
            for attr_name in dir(module):
                attr = getattr(module, attr_name)
                if (isinstance(attr, type) and 
                    issubclass(attr, IPlugin) and 
                    attr != IPlugin):
                    
                    plugin_instance = attr()
                    break
            
            if not plugin_instance:
                self.logger.error(f"‚ùå Plugin class bulunamadƒ±: {plugin_name}")
                return False
            
            # Plugin'i initialize et
            context = {
                "plugin_manager": self,
                "config": self.config.get("plugin_settings", {}).get(plugin_name, {}),
                "workspace_dir": os.getcwd()
            }
            
            if not plugin_instance.initialize(context):
                self.logger.error(f"‚ùå Plugin initialize hatasƒ±: {plugin_name}")
                return False
            
            # Plugin'i kaydet
            self.loaded_plugins[plugin_name] = plugin_instance
            self.plugin_registry[metadata.plugin_type].append(plugin_name)
            
            self.logger.info(f"‚úÖ Plugin y√ºklendi: {plugin_name} ({metadata.plugin_type.value})")
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå Plugin y√ºkleme hatasƒ± ({plugin_name}): {e}")
            return False
    
    def _get_plugin_name_from_file(self, plugin_file: Path) -> Optional[str]:
        """Plugin dosyasƒ±ndan plugin adƒ±nƒ± al"""
        try:
            metadata = self._read_plugin_metadata(plugin_file)
            return metadata.name if metadata else None
        except:
            return None
    
    def unload_plugin(self, plugin_name: str) -> bool:
        """Plugin'i kaldƒ±r"""
        if plugin_name not in self.loaded_plugins:
            self.logger.warning(f"‚ö†Ô∏è Plugin y√ºkl√º deƒüil: {plugin_name}")
            return False
            
        try:
            plugin = self.loaded_plugins[plugin_name]
            plugin.cleanup()
            
            # Registry'den kaldƒ±r
            metadata = self.discovery_cache.get(plugin_name)
            if metadata:
                if plugin_name in self.plugin_registry[metadata.plugin_type]:
                    self.plugin_registry[metadata.plugin_type].remove(plugin_name)
            
            # Loaded plugins'den kaldƒ±r
            del self.loaded_plugins[plugin_name]
            
            self.logger.info(f"‚úÖ Plugin kaldƒ±rƒ±ldƒ±: {plugin_name}")
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå Plugin kaldƒ±rma hatasƒ± ({plugin_name}): {e}")
            return False
    
    def get_plugins_by_type(self, plugin_type: PluginType) -> List[IPlugin]:
        """Belirli t√ºrdeki plugin'leri d√∂nd√ºr"""
        plugins = []
        for plugin_name in self.plugin_registry[plugin_type]:
            if plugin_name in self.loaded_plugins:
                plugins.append(self.loaded_plugins[plugin_name])
        return plugins
    
    def get_plugin(self, plugin_name: str) -> Optional[IPlugin]:
        """Plugin instance'ƒ±nƒ± d√∂nd√ºr"""
        return self.loaded_plugins.get(plugin_name)
    
    def list_plugins(self) -> Dict[str, Dict[str, Any]]:
        """T√ºm plugin'leri listele"""
        result = {}
        
        for plugin_name, metadata in self.discovery_cache.items():
            is_loaded = plugin_name in self.loaded_plugins
            result[plugin_name] = {
                "metadata": metadata,
                "loaded": is_loaded,
                "status": "LOADED" if is_loaded else "DISCOVERED"
            }
            
        return result
    
    def execute_plugin(self, plugin_name: str, *args, **kwargs) -> Any:
        """Plugin'i √ßalƒ±≈ütƒ±r"""
        if plugin_name not in self.loaded_plugins:
            raise ValueError(f"Plugin y√ºkl√º deƒüil: {plugin_name}")
            
        plugin = self.loaded_plugins[plugin_name]
        return plugin.execute(*args, **kwargs)
    
    def create_plugin_template(self, plugin_name: str, plugin_type: PluginType, 
                             author: str = "Unknown") -> str:
        """Yeni plugin template'i olu≈ütur"""
        template_map = {
            PluginType.FORMAT: self._create_format_plugin_template,
            PluginType.TRANSPILER: self._create_transpiler_plugin_template,
            PluginType.ANALYZER: self._create_analyzer_plugin_template,
            PluginType.EXPORT: self._create_export_plugin_template,
            PluginType.TOOL: self._create_tool_plugin_template
        }
        
        template_func = template_map.get(plugin_type)
        if not template_func:
            raise ValueError(f"Desteklenmeyen plugin t√ºr√º: {plugin_type}")
            
        return template_func(plugin_name, author)
    
    def _create_format_plugin_template(self, plugin_name: str, author: str) -> str:
        """Format Plugin template'i olu≈ütur"""
        template = '''"""
{plugin_name} Format Plugin
========================

Author: {author}
Plugin Type: Format
Description: {plugin_name} format desteƒüi
"""

from typing import Dict, Any
from plugin_manager import IFormatPlugin, PluginMetadata, PluginType

class {plugin_name}FormatPlugin(IFormatPlugin):
    
    def get_metadata(self) -> PluginMetadata:
        return PluginMetadata(
            name="{plugin_name}_format",
            version="1.0.0",
            author="{author}",
            description="{plugin_name} format plugin",
            plugin_type=PluginType.FORMAT,
            dependencies=[],
            entry_point="{plugin_name}FormatPlugin"
        )
    
    def initialize(self, context: Dict[str, Any]) -> bool:
        self.context = context
        # Plugin initialization code here
        return True
    
    def cleanup(self) -> None:
        # Cleanup code here
        pass
    
    def get_format_name(self) -> str:
        return "{plugin_name}"
    
    def format_assembly(self, assembly_code: str, options: Dict[str, Any] = None) -> str:
        """Assembly kodunu {plugin_name} formatƒ±na √ßevir"""
        # Format implementation here
        return assembly_code
    
    def parse_assembly(self, formatted_code: str) -> Dict[str, Any]:
        """Formatlanmƒ±≈ü assembly'yi parse et"""
        # Parse implementation here
        return {{"success": True, "parsed_data": {{}}}}
    
    def execute(self, *args, **kwargs) -> Any:
        """Plugin'in ana i≈ülevi"""
        return self.format_assembly(*args, **kwargs)
'''
        return template.format(plugin_name=plugin_name, author=author)
    
    def _create_transpiler_plugin_template(self, plugin_name: str, author: str) -> str:
        """Transpiler Plugin template'i olu≈ütur"""
        template = '''"""
{plugin_name} Transpiler Plugin
============================

Author: {author}
Plugin Type: Transpiler
Description: Assembly ‚Üí {plugin_name} transpiler
"""

from typing import Dict, Any
from plugin_manager import ITranspilerPlugin, PluginMetadata, PluginType

class {plugin_name}TranspilerPlugin(ITranspilerPlugin):
    
    def get_metadata(self) -> PluginMetadata:
        return PluginMetadata(
            name="{plugin_name}_transpiler",
            version="1.0.0",
            author="{author}",
            description="Assembly to {plugin_name} transpiler",
            plugin_type=PluginType.TRANSPILER,
            dependencies=[],
            entry_point="{plugin_name}TranspilerPlugin"
        )
    
    def initialize(self, context: Dict[str, Any]) -> bool:
        self.context = context
        # Plugin initialization code here
        return True
    
    def cleanup(self) -> None:
        # Cleanup code here
        pass
    
    def get_target_language(self) -> str:
        return "{plugin_name}"
    
    def get_file_extension(self) -> str:
        return ".{plugin_name_lower}"
    
    def transpile(self, assembly_code: str, options: Dict[str, Any] = None) -> str:
        """Assembly'yi {plugin_name}'e √ßevir"""
        # Transpiler implementation here
        return "// Generated {plugin_name} code\\n// Original assembly:\\n/* " + str(assembly_code) + " */"
    
    def execute(self, *args, **kwargs) -> Any:
        """Plugin'in ana i≈ülevi"""
        return self.transpile(*args, **kwargs)
'''
        return template.format(plugin_name=plugin_name, author=author, plugin_name_lower=plugin_name.lower())
    
    def _create_analyzer_plugin_template(self, plugin_name: str, author: str) -> str:
        """Analyzer Plugin template'i olu≈ütur"""
        template = '''"""
{plugin_name} Analyzer Plugin
==========================

Author: {author}
Plugin Type: Analyzer
Description: {plugin_name} kod analizi
"""

from typing import Dict, Any
from plugin_manager import IAnalyzerPlugin, PluginMetadata, PluginType

class {plugin_name}AnalyzerPlugin(IAnalyzerPlugin):
    
    def get_metadata(self) -> PluginMetadata:
        return PluginMetadata(
            name="{plugin_name}_analyzer",
            version="1.0.0",
            author="{author}",
            description="{plugin_name} code analyzer",
            plugin_type=PluginType.ANALYZER,
            dependencies=[],
            entry_point="{plugin_name}AnalyzerPlugin"
        )
    
    def initialize(self, context: Dict[str, Any]) -> bool:
        self.context = context
        # Plugin initialization code here
        return True
    
    def cleanup(self) -> None:
        # Cleanup code here
        pass
    
    def get_analysis_type(self) -> str:
        return "{plugin_name}"
    
    def analyze(self, code: str, context: Dict[str, Any] = None) -> Dict[str, Any]:
        """{plugin_name} analizi yap"""
        # Analysis implementation here
        return {{
            "analysis_type": "{plugin_name}",
            "results": [],
            "summary": "Analysis completed",
            "success": True
        }}
    
    def execute(self, *args, **kwargs) -> Any:
        """Plugin'in ana i≈ülevi"""
        return self.analyze(*args, **kwargs)
'''
        return template.format(plugin_name=plugin_name, author=author)
    
    def _create_export_plugin_template(self, plugin_name: str, author: str) -> str:
        """Export Plugin template'i olu≈ütur"""
        template = '''"""
{plugin_name} Export Plugin
========================

Author: {author}
Plugin Type: Export
Description: {plugin_name} format export
"""

from typing import Dict, Any
from plugin_manager import IExportPlugin, PluginMetadata, PluginType

class {plugin_name}ExportPlugin(IExportPlugin):
    
    def get_metadata(self) -> PluginMetadata:
        return PluginMetadata(
            name="{plugin_name}_export",
            version="1.0.0",
            author="{author}",
            description="{plugin_name} format exporter",
            plugin_type=PluginType.EXPORT,
            dependencies=[],
            entry_point="{plugin_name}ExportPlugin"
        )
    
    def initialize(self, context: Dict[str, Any]) -> bool:
        self.context = context
        # Plugin initialization code here
        return True
    
    def cleanup(self) -> None:
        # Cleanup code here
        pass
    
    def get_export_format(self) -> str:
        return "{plugin_name}"
    
    def export(self, data: Any, output_path: str, options: Dict[str, Any] = None) -> bool:
        """Veriyi {plugin_name} formatƒ±nda export et"""
        try:
            # Export implementation here
            with open(output_path, 'w', encoding='utf-8') as f:
                f.write("Exported to {plugin_name} format\\n")
                f.write(str(data))
            return True
        except Exception as e:
            print("Export error: " + str(e))
            return False
    
    def execute(self, *args, **kwargs) -> Any:
        """Plugin'in ana i≈ülevi"""
        return self.export(*args, **kwargs)
'''
        return template.format(plugin_name=plugin_name, author=author)
    
    def _create_tool_plugin_template(self, plugin_name: str, author: str) -> str:
        """Tool Plugin template'i olu≈ütur"""
        template = '''"""
{plugin_name} Tool Plugin
=====================

Author: {author}
Plugin Type: Tool
Description: {plugin_name} tool
"""

from typing import Dict, Any
from plugin_manager import IToolPlugin, PluginMetadata, PluginType

class {plugin_name}ToolPlugin(IToolPlugin):
    
    def get_metadata(self) -> PluginMetadata:
        return PluginMetadata(
            name="{plugin_name}_tool",
            version="1.0.0",
            author="{author}",
            description="{plugin_name} tool plugin",
            plugin_type=PluginType.TOOL,
            dependencies=[],
            entry_point="{plugin_name}ToolPlugin"
        )
    
    def initialize(self, context: Dict[str, Any]) -> bool:
        self.context = context
        # Plugin initialization code here
        return True
    
    def cleanup(self) -> None:
        # Cleanup code here
        pass
    
    def get_tool_name(self) -> str:
        return "{plugin_name}"
    
    def run_tool(self, input_data: Any, options: Dict[str, Any] = None) -> Any:
        """{plugin_name} tool'unu √ßalƒ±≈ütƒ±r"""
        # Tool implementation here
        return {{
            "tool_name": "{plugin_name}",
            "input_data": input_data,
            "result": "Tool executed successfully",
            "success": True
        }}
    
    def execute(self, *args, **kwargs) -> Any:
        """Plugin'in ana i≈ülevi"""
        return self.run_tool(*args, **kwargs)
'''
        return template.format(plugin_name=plugin_name, author=author)

# Plugin Manager Singleton Instance
_plugin_manager_instance = None

def get_plugin_manager() -> PluginManager:
    """Global Plugin Manager instance'ƒ±nƒ± d√∂nd√ºr"""
    global _plugin_manager_instance
    if _plugin_manager_instance is None:
        _plugin_manager_instance = PluginManager()
    return _plugin_manager_instance

# Example Usage & Demo
if __name__ == "__main__":
    print("üîå Professional Plugin Architecture Demo")
    print("=" * 50)
    
    # Plugin Manager olu≈ütur
    pm = PluginManager()
    
    # Plugin'leri listele
    plugins = pm.list_plugins()
    print(f"\nüìã Ke≈üfedilen Plugin'ler ({len(plugins)} adet):")
    for name, info in plugins.items():
        status = "üü¢ LOADED" if info["loaded"] else "üîµ DISCOVERED"
        print(f"  {status} {name} v{info['metadata'].version} ({info['metadata'].plugin_type.value})")
    
    # Plugin t√ºrlerine g√∂re g√∂ster
    print(f"\nüìä Plugin T√ºrleri:")
    for plugin_type in PluginType:
        count = len(pm.plugin_registry[plugin_type])
        print(f"  {plugin_type.value.title()}: {count} adet")
    
    print(f"\n‚úÖ Plugin Manager hazƒ±r - {len(pm.loaded_plugins)} plugin aktif")
